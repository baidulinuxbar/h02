关于static 定义的变量或函数，
模块文件：是指的编译生成的o文件，也即gcc -c 生成的文件.

在同一个模块o中（定义在当前c文件中或不被其他模块所包含的头文件中）所有的函数均可正常访问，
多模块下（定义在头文件，并且该头文件在多个模块下被引用）需使用static性质的函数访问。

在一个模块下定义的static函数或变量，不可被其他模块访问。

对汇编代码的测试：同样不能调用其他模块下的static函数。

关于不同模块下的函数调用：
1、可以包含目标模块含有所有函数定义的头文件。
2、在调用模块下使用extern int foo(); 声明目标函数。
但是，上面这两种做法的前提是这些模块要通过ld命令链接成一个目标文件。
2020-4-24
添加的用C重写的硬盘驱动再次证实了我的猜测：
1、在一个模块中定义的static变量可以通过本模块下的函数（非static函数）在其他模块下访问，
2、在头文件中善用条件语句，可实现头文件的高效组合。
---------------------h02---------------------------------------------------------
2020-4-28
解决了一个莫名其妙的问题：head之前的工作全部完成，转入kernel后，仍将一些head中的函数和变量定义
拷贝至kernel继续使用，但是却发生了一个奇怪的错误。莫名的显示GDT或LDT索引错误，为了避免过渡环节
可能的错误，我将中断进行了屏蔽，问题依然存在。反复查找（幸亏查找，发现了ldt安装的一个错误）。
也没排除这个错误。再次仔细的查看bochs的各种返回值，发现esp的赋值明显错误。而跳转至kernel后，我是
对esp专门进行了赋值的，再次查看赋值，表面上没有错误，当时将其从定义文件转至kernel主文件后问题
消失，猛然想起，虽然在磁盘中读取了32个扇区的kernel数据，但是（当时仅是测试硬盘驱动是否成功）只从
缓冲区拷贝了1024字节的数据到kernel的运行空间！！也就是用于加载ss:esp的变量定义超出了1024的范围，
致使段描述符无效！！！！





